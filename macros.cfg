[include prime_line.cfg]

[gcode_macro PRIME_LINE_ERLIS]
gcode: 
    G92 E0;
    G90
    G0 X90 Y5 F6000  ;initial line position

    G0 Z0.4
    G91
    G1 X120 E30 F1200 ; high flow 
    G1 Y1
    G1 X-120 E30 F1200; high flow
    G92 E0;

    G90
    G1 Z15.0 F9000 ;move the platform down 15mm
    G92 E0 ;zero the extruded length again
    G1 F9000

#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90

    STATUS_HOMING
    G28

    STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    STATUS_HOMING
    G28
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    LED_PCT_IDLE
    ;; warming up
    G90                    ; use absolute coordinates
    G28                    ; home all axis
    G0 X150 Y150 Z45 F3600  ; go to center of bed
    M104 S140              ; set extruder no-ooze temp
    M190 S{params.BED}     ; set bed temperature

    ;; home and quad gantry level 
    G32
    STATUS_CALIBRATING_Z
    CALIBRATE_Z
    STATUS_HEATING

    ;; final warm up
    G0 X0 Y0 Z5 F10200   ; move to the front, ready for prime line
    M104 S{params.EXTRUDER} ; set extruder temp
    M140 S{params.BED} ; set bed temp
    M190 S{params.BED} ; wait for bed temp
    M109 S{params.EXTRUDER} ; wait for extruder temp
    G0 Z0.15 ; Restore nozzle position - (thanks tim.m30)

    ;; the prime line 
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
    ALL_LED_PRINTING
    PRIME_LINE
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    ;;;G0 X{th.axis_maximum.x//2} Y5 F3600  ; park nozzle at front
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    ALL_LED_OFF
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro GREASE]
gcode:
  G32  
  G0 X204 Y300 Z111 F10200 

####################################################
## Lights
####################################################
[gcode_macro ALL_LED_PRINTING]
gcode: 
  STATUS_PRINTING
  LED_PCT_PRINT

[gcode_macro ALL_LED_OFF]
gcode: 
  STATUS_OFF
  LED_OFF

[gcode_macro LED_ON]
gcode:
  SET_PIN PIN=caselight VALUE=1
[gcode_macro LED_PCT_IDLE]
gcode:
  SET_PIN PIN=caselight VALUE=0.06
[gcode_macro LED_PCT_PRINT]
gcode:
  SET_PIN PIN=caselight VALUE=0.3
[gcode_macro LED_OFF]
gcode:
  SET_PIN PIN=caselight VALUE=0

####################################################################
# Ellis macros
####################################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro M600]
gcode:
    PAUSE                ; Pause

[gcode_macro M601]
gcode:
  PAUSE


[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
    G91
    G1 E50 F120
    G92
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_STATE


[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(600) %}
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
    G91
    G1 E10 F300
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE

